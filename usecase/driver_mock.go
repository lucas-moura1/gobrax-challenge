// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/driver.go

// Package usecase is a generated GoMock package.
package usecase

import (
	reflect "reflect"

	entity "github.com/lucas-moura1/gobrax-challenge/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockDriverUsecase is a mock of DriverUsecase interface.
type MockDriverUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockDriverUsecaseMockRecorder
}

// MockDriverUsecaseMockRecorder is the mock recorder for MockDriverUsecase.
type MockDriverUsecaseMockRecorder struct {
	mock *MockDriverUsecase
}

// NewMockDriverUsecase creates a new mock instance.
func NewMockDriverUsecase(ctrl *gomock.Controller) *MockDriverUsecase {
	mock := &MockDriverUsecase{ctrl: ctrl}
	mock.recorder = &MockDriverUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverUsecase) EXPECT() *MockDriverUsecaseMockRecorder {
	return m.recorder
}

// AddVehicle mocks base method.
func (m *MockDriverUsecase) AddVehicle(driverId int, vehicle *entity.Vehicle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVehicle", driverId, vehicle)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVehicle indicates an expected call of AddVehicle.
func (mr *MockDriverUsecaseMockRecorder) AddVehicle(driverId, vehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVehicle", reflect.TypeOf((*MockDriverUsecase)(nil).AddVehicle), driverId, vehicle)
}

// Create mocks base method.
func (m *MockDriverUsecase) Create(driver *entity.Driver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", driver)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDriverUsecaseMockRecorder) Create(driver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDriverUsecase)(nil).Create), driver)
}

// Delete mocks base method.
func (m *MockDriverUsecase) Delete(driverId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", driverId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDriverUsecaseMockRecorder) Delete(driverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDriverUsecase)(nil).Delete), driverId)
}

// GetAll mocks base method.
func (m *MockDriverUsecase) GetAll() ([]*entity.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDriverUsecaseMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDriverUsecase)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockDriverUsecase) GetById(driverId int, includeVehicle bool) (*entity.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", driverId, includeVehicle)
	ret0, _ := ret[0].(*entity.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockDriverUsecaseMockRecorder) GetById(driverId, includeVehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockDriverUsecase)(nil).GetById), driverId, includeVehicle)
}

// Update mocks base method.
func (m *MockDriverUsecase) Update(driverId int, driver *entity.Driver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", driverId, driver)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDriverUsecaseMockRecorder) Update(driverId, driver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDriverUsecase)(nil).Update), driverId, driver)
}
