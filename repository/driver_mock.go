// Code generated by MockGen. DO NOT EDIT.
// Source: repository/driver.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	entity "github.com/lucas-moura1/gobrax-challenge/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockDriverRepository is a mock of DriverRepository interface.
type MockDriverRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDriverRepositoryMockRecorder
}

// MockDriverRepositoryMockRecorder is the mock recorder for MockDriverRepository.
type MockDriverRepositoryMockRecorder struct {
	mock *MockDriverRepository
}

// NewMockDriverRepository creates a new mock instance.
func NewMockDriverRepository(ctrl *gomock.Controller) *MockDriverRepository {
	mock := &MockDriverRepository{ctrl: ctrl}
	mock.recorder = &MockDriverRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverRepository) EXPECT() *MockDriverRepositoryMockRecorder {
	return m.recorder
}

// AddVehicle mocks base method.
func (m *MockDriverRepository) AddVehicle(driver *entity.Driver, vehicle *entity.Vehicle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVehicle", driver, vehicle)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVehicle indicates an expected call of AddVehicle.
func (mr *MockDriverRepositoryMockRecorder) AddVehicle(driver, vehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVehicle", reflect.TypeOf((*MockDriverRepository)(nil).AddVehicle), driver, vehicle)
}

// Create mocks base method.
func (m *MockDriverRepository) Create(driver *entity.Driver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", driver)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDriverRepositoryMockRecorder) Create(driver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDriverRepository)(nil).Create), driver)
}

// Delete mocks base method.
func (m *MockDriverRepository) Delete(driverId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", driverId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDriverRepositoryMockRecorder) Delete(driverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDriverRepository)(nil).Delete), driverId)
}

// GetAll mocks base method.
func (m *MockDriverRepository) GetAll() ([]*entity.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDriverRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDriverRepository)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockDriverRepository) GetById(driverId int, includeVehicle bool) (*entity.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", driverId, includeVehicle)
	ret0, _ := ret[0].(*entity.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockDriverRepositoryMockRecorder) GetById(driverId, includeVehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockDriverRepository)(nil).GetById), driverId, includeVehicle)
}

// Update mocks base method.
func (m *MockDriverRepository) Update(driver *entity.Driver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", driver)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDriverRepositoryMockRecorder) Update(driver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDriverRepository)(nil).Update), driver)
}
