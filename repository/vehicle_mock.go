// Code generated by MockGen. DO NOT EDIT.
// Source: repository/vehicle.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	entity "github.com/lucas-moura1/gobrax-challenge/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockVehicleRepository is a mock of VehicleRepository interface.
type MockVehicleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleRepositoryMockRecorder
}

// MockVehicleRepositoryMockRecorder is the mock recorder for MockVehicleRepository.
type MockVehicleRepositoryMockRecorder struct {
	mock *MockVehicleRepository
}

// NewMockVehicleRepository creates a new mock instance.
func NewMockVehicleRepository(ctrl *gomock.Controller) *MockVehicleRepository {
	mock := &MockVehicleRepository{ctrl: ctrl}
	mock.recorder = &MockVehicleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicleRepository) EXPECT() *MockVehicleRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockVehicleRepository) Delete(vehicleId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", vehicleId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVehicleRepositoryMockRecorder) Delete(vehicleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVehicleRepository)(nil).Delete), vehicleId)
}

// GetAll mocks base method.
func (m *MockVehicleRepository) GetAll() ([]*entity.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockVehicleRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockVehicleRepository)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockVehicleRepository) GetById(vehicleId int) (*entity.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", vehicleId)
	ret0, _ := ret[0].(*entity.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockVehicleRepositoryMockRecorder) GetById(vehicleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockVehicleRepository)(nil).GetById), vehicleId)
}

// Update mocks base method.
func (m *MockVehicleRepository) Update(vehicle *entity.Vehicle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", vehicle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVehicleRepositoryMockRecorder) Update(vehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVehicleRepository)(nil).Update), vehicle)
}
